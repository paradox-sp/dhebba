import 'dart:convert';
import 'dart:math';
import 'dart:typed_data';
import 'package:flutter/material.dart';
import 'package:flutter_app/bootstrap/helpers.dart';
// import 'package:nfc_manager/nfc_manager.dart';
// import 'package:nfc_manager/platform_tags.dart';
import 'package:nylo_framework/nylo_framework.dart';
import 'package:fluttertoast/fluttertoast.dart';
// import 'package:flutter_app/config/theme.dart';

class NfcPage extends NyStatefulWidget {
  static const path = '/nfc';

  NfcPage({super.key}) : super(path, child: _NfcPageState());
}

class _NfcPageState extends NyState<NfcPage> with TickerProviderStateMixin {
  late AnimationController _controller;
  late List<Widget> _circles;

  @override
  init() async {
    super.init();
    _controller = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    )..repeat();
    _circles = List.generate(1, (i) => _buildCircle(i));
  }

  @override
  void dispose() {
    _controller
        .dispose(); // Dispose of the AnimationController when the widget is disposed
    super.dispose();
  }

  /// Use boot if you need to load data before the [view] is rendered.
  // @override
  // boot() async {
  //
  // }
  Widget _buildCircle(int index) {
    return AnimatedBuilder(
      animation: _controller,
      builder: (context, child) {
        var screenSize = MediaQuery.of(context).size;
        var maxRadius =
            sqrt(pow(screenSize.width, 2) + pow(screenSize.height, 2));
        var radius = (1 - _controller.value) * maxRadius / 2 * (index + 1);
        return Positioned(
          top: radius,
          bottom: radius,
          left: radius,
          right: radius,
          child: Opacity(
            opacity: max(1 - _controller.value * (index + 1), 0),
            child: Container(
              decoration: BoxDecoration(
                shape: BoxShape.circle,
                border: Border.all(width: 80),
              ),
              width: radius * 2,
              height: radius * 2,
            ),
          ),
        );
      },
    );
  }

  void _startNFCWriting() async {
    try {
      // Check if NFC is available on the device or not.
      // bool isAvailable = await NfcManager.instance.isAvailable();

// If NFC is available, start a session to listen for NFC tags.
      if (isAvailable) {
        NfcManager.instance.startSession(onDiscovered: (NfcTag tag) async {
          try {
            // When an NFC tag is discovered, we check if it supports NDEF technology.
            // If it supports NDEF, create an NDEF message and write it to the tag.
            // NdefMessage message =
            //     NdefMessage([NdefRecord.createText('Hello, NFC!')]);
            // await Ndef.from(tag)?.write(message);
            print("here");
            MifareClassic? mifareClassic = MifareClassic.from(tag);
            // if (mifareClassic != null) {
            Uint8List data = Uint8List.fromList(
                'Hello, NFC!'.codeUnits); // convert string to Uint8List
            int blockIndex = 10;
            print("h0jhfere");
            await mifareClassic?.writeBlock(blockIndex: blockIndex, data: data);

            Fluttertoast.showToast(msg: 'Data emitted successfully');

            // Uint8List payload = message.records.first.payload;
            // String text = String.fromCharCodes(payload);

            // Fluttertoast.showToast(msg: "Written data: $text");
            // }
          } catch (e) {
            Fluttertoast.showToast(msg: 'Error emitting NFC data: $e');
          }
        });
      } else {
        Fluttertoast.showToast(msg: 'NFC not available.');
      }
    } catch (e) {
      Fluttertoast.showToast(msg: 'Error writing to NFC: $e');
    }
  }

  @override
  Widget view(BuildContext context) {
    return Scaffold(
      // appBar: AppBar(
      //   title: const Text('NFC'),
      // ),
      body: Stack(
        alignment: Alignment.center,
        children: <Widget>[
          Stack(
            alignment: Alignment.center,
            children: _circles,
          ),
          ElevatedButton(
            onPressed: _startNFCWriting,
            child: Text(
              'Push',
              style: TextStyle(
                color: ThemeColor.get(context)
                    .primaryContent // Color - primary content
                ,
                fontSize: 30,
                fontWeight: FontWeight.bold,
              ),
            ),
            style: ElevatedButton.styleFrom(
              foregroundColor: Colors.black,
              backgroundColor:
                  Colors.transparent, // change the text color as needed
              shape: CircleBorder(),
              padding: EdgeInsets.all(50),
              side: BorderSide(
                  color: ThemeColor.get(context).primaryContent,
                  // color: Color.fromARGB(255, 28, 108, 173),
                  width: 0.5), // add a border if needed
            ),
          ),
        ],
      ),
    );
  }
}
